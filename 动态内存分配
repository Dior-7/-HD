#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>2
struct S
{
	char name[20];
	int age;

};
//int main()
//{
//	/*int n = 0;
//	scanf("%d", &n);*/
//	
//	int *p= (int *)malloc(40 * sizeof(int));//向内存申请10个字节的整形空间
//	if (p == NULL)
//	{
//		printf("%s", strerror(errno));
//
//	}
//	else
//	{
//		//正常使用空间
//		int i = 0;
//		for (i = 0; i < 10; i++)
//		{
//			*(p + i) = i;
//
//
//		}
//		for (i = 0; i < 10; i++)
//		{
//			printf("%d ", *(p + i));
//		}
//
//	}
//	//开辟空间完成
//	//当动态申请的空间不再使用的时候，就要还给操作系统
//	//free
//	free(p);
//	p = NULL;
//
//
//	return 0;
//}
//int main()
//{
	/*malloc(10 * sizeof(int));*/

	//int* p = (int*)calloc(10, sizeof(int));
	//if (p == NULL)
	//{
	//	printf("%s", strerror(errno));

	//}
	//else
	//{
	//	int i = 0;
	//	/*for (i = 0; i < 10; i++)
	//	{
	//		*(p + i) = i;

	//	}*/
	//	for (i = 0; i < 10; i++)
	//	{
	//		printf("%d ", *(p + i));
	//		
	//		int n=sizeof(*(p + i));
	//		
	//		printf("%d ", n);
	//		printf("\n");
	//	}

	//}
	//free(p);
	//p = NULL;
	/*int* p = (int*)malloc(20);
	if (p == NULL)
	{
		printf("%s", strerror(errno));

	}
	else
	{
		int i = 0;
		for (i = 0; i < 5; i++)
		{
			*(p + i) = i;

		}

	}*/

	//就是使用malloc函数开辟了一个20个字节的整形空间
	//如果20个字节不满足我们的使用怎么办
	//我们可以使用realloc函数来调整我们开辟的内存
//	int *p2= (int *)realloc(p, 40);
//	int i = 0;
//	for (i = 0; i < 40; i++)
//	{
//		printf("%d ", *(p2 + i) );
//
//
//	}
//
//
//	return 0;
//}
int main()
{
	
	return 0;
}
