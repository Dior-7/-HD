
//开始游戏
void Gameplay()
{
 
    struct Tetris t, * tetris = &t;
    char ch;
    tetris->number = 0;
    tetris->speed = 300;
    tetris->score = 0;
    tetris->level = 1;
    while (1)
    {
        Flag(tetris);
        Temp = tetris->flag;
        tetris->x = FrameX + 2 * Frame_width + 6;//交换方块类型 
        tetris->y = FrameY + 10;
        tetris->flag = tetris->next;
        PrintTetris(tetris);
        tetris->x = FrameX + Frame_width;//让方块正好出现在屏幕中间
        tetris->y = FrameY - 1;
        tetris->flag = Temp;


        //按键操作
        while (1)  										//控制方块方向，直至方块不再下移
        {
        label:PrintTetris(tetris);					//打印俄罗斯方块
            Sleep(tetris->speed);   					//延缓时间
            CleanTetris(tetris);  						//清除痕迹
            Temp1 = tetris->x;    						//记住中心方块横坐标的值
            Temp2 = tetris->flag;    						//记住当前俄罗斯方块序号
            if (kbhit())       				  	 		//判断是否有键盘输入，有则用ch↓接收
            {
                ch = getch();
                if (ch == 75)     							//按 ←键则向左动，中心横坐标减2
                {
                    tetris->x -= 2;
                }
                if (ch == 77)     							//按 →键则向右动，中心横坐标加2
                {
                    tetris->x += 2;
                }
                if (ch == 80)     							//按 ↓键则加速下落
                {
                    if (ifmove(tetris) != 0)
                    {
                        tetris->y += 2;
                    }
                    if (ifmove(tetris) == 0)
                    {
                        tetris->y = FrameY + Frame_height - 2;
                    }
                }
                if (ch == 72)     						//按 ↑键则变体,即当前方块顺时针转90度
                {
                    if (tetris->flag >= 2 && tetris->flag <= 3)
                    {
                        tetris->flag++;
                        tetris->flag %= 2;
                        tetris->flag += 2;
                    }
                    if (tetris->flag >= 4 && tetris->flag <= 7)
                    {
                        tetris->flag++;
                        tetris->flag %= 4;
                        tetris->flag += 4;
                    }
                    if (tetris->flag >= 8 && tetris->flag <= 11)
                    {
                        tetris->flag++;
                        tetris->flag %= 4;
                        tetris->flag += 8;
                    }
                    if (tetris->flag >= 12 && tetris->flag <= 15)
                    {
                        tetris->flag++;
                        tetris->flag %= 4;
                        tetris->flag += 12;
                    }
                    if (tetris->flag >= 16 && tetris->flag <= 19)
                    {
                        tetris->flag++;
                        tetris->flag %= 4;
                        tetris->flag += 16;
                    }
                }
                if (ch == 32)     					//按空格键，暂停
                {
                    PrintTetris(tetris);
                    while (1)
                    {
                        if (kbhit())   			//再按空格键，继续游戏
                        {
                            ch = getch();
                            if (ch == 32)
                            {
                                goto label;
                            }
                        }
                    }
                }
                if (ch == 27)
                {
                    system("cls");
                    memset(a, 0, 6400 * sizeof(int));       //初始化BOX数组
                    welcome();
                }
                if (ifmove(tetris) == 0) 			//如果不可动，上面操作无效
                {
                    tetris->x = Temp1;
                    tetris->flag = Temp2;
                }
                else      						//如果可动，执行操作
                {
                    goto label;
                }
            }
            tetris->y++;     					//如果没有操作指令，方块向下移动
            if (ifmove(tetris) == 0)  				//如果向下移动且不可动，方块放在此处
            {
                tetris->y--;
                PrintTetris(tetris);
                Del_Fullline(tetris);
                break;
            }
        }

        for (i = tetris->y - 2; i < tetris->y + 2; i++)	//游戏结束条件：方块触到框顶位置
        {
            if (i == FrameY)
            {
                system("cls");
                gotoxy(29, 7);
                printf("   \n");
                color(12);
                printf("\t\t\t■■■■   ■     ■   ■■     \n");
                printf("\t\t\t■         ■■   ■   ■  ■   \n");
                printf("\t\t\t■■■     ■  ■ ■   ■   ■  \n");
                printf("\t\t\t■         ■   ■■   ■  ■   \n");
                printf("\t\t\t■■■■   ■     ■   ■■     \n");
                gotoxy(17, 18);
                color(14);
                printf("我要重新玩一局-------1");
                gotoxy(44, 18);
                printf("不玩了，退出吧-------2\n");
                int n;
                gotoxy(32, 20);
                printf("选择【1/2】：");
                color(11);
                scanf("%d", &n);
                switch (n)
                {
                case 1:
                    system("cls");
                    Replay(tetris);       	//重新开始游戏
                    break;
                case 2:
                    exit(0);
                    break;
                }
            }
        }
        tetris->flag = tetris->next;  			//清除下一个俄罗斯方块的图形(右边窗口)
        tetris->x = FrameX + 2 * Frame_width + 6;
        tetris->y = FrameY + 10;
        CleanTetris(tetris);




    }
}



//重新开始游戏
void Replay(struct Tetris* tetris)
{
    system("cls");
    memset(a, 0, 6400 * sizeof(int));
    DrwaGameframe();
    Gameplay();


}

//按键说明
void explation()
{
    int i, j = 1;
    system("cls");
    color(13);
    gotoxy(32, 3);
    printf("按键说明");
    color(2);
    for (i = 6; i <= 16; i++)
    {
        for (j = 15; j <= 60; j++)
        {
            gotoxy(j, i);
            if (i == 6 || i == 16)
            {
                printf("=");

            }
            else  if (j == 15 || j == 59)
            {
                printf("||");

            }
        }

        color(3);
        gotoxy(18, 7);
        printf("tip1: 玩家可以通过 ← →方向键来移动方块");
        color(10);
        gotoxy(18, 9);
        printf("tip2: 通过 ↑使方块旋转");
        color(14);
        gotoxy(18, 11);
        printf("tip3: 通过 ↓加速方块下落");
        color(11);
        gotoxy(18, 13);
        printf("tip4: 按空格键暂停游戏，再按空格键继续");
        color(4);
        gotoxy(18, 15);
        printf("tip5: 按ESC退出游戏");
        getch();                //按任意键返回主界面
        system("cls");
    }
    
}

//游戏说明 

void regulation()
{
    int i, j = 1;
    system("cls");
    color(13);
    gotoxy(34, 3);
    printf("游戏规则");
    color(2);
    for (i = 6; i <= 18; i++)   //输出上下边框===
    {
        for (j = 12; j <= 70; j++)  //输出左右边框||
        {
            gotoxy(j, i);
            if (i == 6 || i == 18) printf("=");
            else if (j == 12 || j == 69) printf("||");
        }
    }
    color(12);
    gotoxy(16, 7);
    printf("tip1: 不同形状的小方块从屏幕上方落下，玩家通过调整");
    gotoxy(22, 9);
    printf("方块的位置和方向，使他们在屏幕底部拼出完整的");
    gotoxy(22, 11);
    printf("一条或几条");
    color(14);
    gotoxy(16, 13);
    printf("tip2: 每消除一行，积分增加100");
    color(11);
    gotoxy(16, 15);
    printf("tip3: 每累计1000分，会提升一个等级");
    color(10);
    gotoxy(16, 17);
    printf("tip4: 提升等级会使方块下落速度加快，游戏难度加大");
    getch();                //按任意键返回主界面
    system("cls");
    welcome();
}

//退出游戏
void close()
{
    exit(0);
}

int main()
{

    title();
    flower();
    welcome();
}
